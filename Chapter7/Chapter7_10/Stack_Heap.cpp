#include <iostream>

int main()
{
	// 프로그램을 실행시키면 OS(운영체제)는 메모리를 넘겨준다
	// 메모리는 segment(세그먼트)라고 불리는 여러 구역으로 나뉘는데

	// Code 세그먼트에는 작성한 프로그램이 저장이 된다
	// 실행시키는 부분을 가져와서 실행한다

	// Data 세그먼트는 2종류가 있다
	// 1. initialized data segment <- 초기화된, 전역변수와 static(정적)변수가 저장이 된다
	// 2. uninitialized data segment <- 0으로 초기화된, 전역변수와 static(정적)변수가 저장이 된다

	// Stack
	// 변수를 만들거나 함수를 호출할 때마다 stack frame에 저장되게 된다
	// 함수가 종료되면 스택에 쌓여있던 것을 위에서부터 제거한다
	// 스택은 단점이 있는데, 빠른만큼 사이즈가 작다
	// 사이즈가 매우 큰, 정적 배열을 만드려고 하면 stack overflow가 난다
	// 로컬변수들은 stack에 저장된다, 포인터도 마찬가지로 stack에 저장된다

	// 여담으로 메모리 Heap과 자료구조 Heap은 서로 전혀 상관이 없다

	// memory leak : 메모리 누수
	// 어떤 함수를 호출하는데, 그 함수는 포인터를 이용하여
	// 동적 배열을 만드는 기능을 수행한다고 쳤을 때
	// 함수가 종료됨과 동시에 포인터를 stack frame에서 삭제하는데
	// 이 때, delete[]를 안 해주게 되면 포인터만 사라지고 Heap에는
	// 동적 배열 사이즈만큼의 메모리가 계속 남아있게 된다
	// 포인터가 사라졌기 때문에 더 이상 동적 배열에 접근할 수 없게 되는데
	// 이런 식으로, 메모리가 계속 남아서 공간을 차지하고 있는 상황을 memory leak이라고 부른다
	// Java나 Python등의 언어는 garbage collection이 있어서
	// 더 이상, 그 주소에 접근할 수 없게 됐을 때, 이런 누수된 메모리들을 자동으로 지워주지만
	// C/C++은 수동으로 일일이 처리해줘야 하기 때문에 항상 신경써야 한다
	
	return 0;
}